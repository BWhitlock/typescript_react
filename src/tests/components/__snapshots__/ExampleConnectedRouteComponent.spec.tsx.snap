// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExampleConnectedRouteComponent matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <h2>
        No message.
    </h2>
    <p>
        flag is set
    </p>
    <button
        onClick={[Function]}
    >
        Toggle the flag
    </button>
</div>,
  "nodes": Array [
    <div>
      <h2>
            No message.
      </h2>
      <p>
            flag is set
      </p>
      <button
            onClick={[Function]}
      >
            Toggle the flag
      </button>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ExampleConnectedRouteComponent
        createExampleAction={[Function]}
        flag={true}
        history={
                Object {
                        "action": "REPLACE",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 0,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "key": "",
                          "pathname": "",
                          "search": "",
                          "state": Object {},
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
        }
        location={
                Object {
                        "hash": "",
                        "key": "",
                        "pathname": "",
                        "search": "",
                        "state": Object {},
                      }
        }
        match={
                Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "",
                        "url": "",
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ExampleConnectedRouteComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "createExampleAction": [Function],
          "flag": true,
          "history": Object {
            "action": "REPLACE",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 0,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "",
              "pathname": "",
              "search": "",
              "state": Object {},
            },
            "push": [Function],
            "replace": [Function],
          },
          "location": Object {
            "hash": "",
            "key": "",
            "pathname": "",
            "search": "",
            "state": Object {},
          },
          "match": Object {
            "isExact": false,
            "params": Object {},
            "path": "",
            "url": "",
          },
        },
        "refs": Object {},
        "state": null,
        "toggleFlag": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <h2>
                    No message.
          </h2>
          <p>
                    flag is set
          </p>
          <button
                    onClick={[Function]}
          >
                    Toggle the flag
          </button>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          <h2>
                    No message.
          </h2>
          <p>
                    flag is set
          </p>
          <button
                    onClick={[Function]}
          >
                    Toggle the flag
          </button>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ExampleConnectedRouteComponent
    createExampleAction={[Function]}
    flag={true}
    history={
        Object {
            "action": "REPLACE",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 0,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "",
              "pathname": "",
              "search": "",
              "state": Object {},
            },
            "push": [Function],
            "replace": [Function],
          }
    }
    location={
        Object {
            "hash": "",
            "key": "",
            "pathname": "",
            "search": "",
            "state": Object {},
          }
    }
    match={
        Object {
            "isExact": false,
            "params": Object {},
            "path": "",
            "url": "",
          }
    }
/>,
}
`;
